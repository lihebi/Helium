#!/usr/bin/env python3

"""
pyhelium is the python scripting system of Helium.

This is the main entry point of pyhelium.
"""

from threading import Thread
import argparse
import os
import subprocess
import pprint
import json

from iclones_process import create_iclones_selection
# from preprocess import unzip, preprocess, create_selection
import shutil

def create_selection(indir, outdir):
    """
    Create random selection for all cache folder
    """
    for item in os.listdir(indir):
        print ('creating selection for ' + os.path.join(indir, item) + ' ..')
        benchmark=os.path.join(indir, item)
        outputdir=os.path.join(outdir, item)
        if os.path.isdir(benchmark):
            cmd = 'helium --create-selection --sel-num 20 --sel-tok 10 '\
                  + benchmark + ' -o ' + outputdir
            print ("\t==>", cmd)
            complete = subprocess.run(cmd, shell=True)
            if (complete.returncode != 0):
                print("\tFailed")
def preprocess(indir, outdir):
    """
    2. create include.json
    3. create snippets.json
    """
    if os.path.exists(outdir): shutil.rmtree(outdir)
    os.mkdir(outdir)
    for item in os.listdir(indir):
        print ('preprocessing for ' + os.path.join(indir, item) + ' ..')
        benchmark = os.path.join(indir, item)
        # outputdir = os.path.join(outdir, item)
        # print('creating output dir', outputdir)
        os.mkdir(os.path.join(outdir, item))
        prepdir = os.path.join(outdir, item)
        includejson = os.path.join(outdir, item, 'include.json')
        snippetjson = os.path.join(outdir, item, 'snippets.json')
        
        cmd = 'helium --preprocess ' + benchmark + ' -o ' + prepdir
        print ("\t==>", cmd)
        completed = subprocess.run(cmd, shell=True)
        if completed.returncode is not 0:
            print("Failed")
        
        cmd = 'helium --create-include-dep ' + benchmark\
              + ' -o ' + includejson
        print ("\t==>", cmd)
        completed = subprocess.run(cmd, shell=True)
        if completed.returncode is not 0:
            print("Failed")
            
        cmd = 'helium --create-snippet ' + benchmark\
              + ' --include-dep ' + includejson\
              + ' -o ' + snippetjson
        print ("\t==>", cmd)
        completed = subprocess.run(cmd, shell=True)
        if completed.returncode is not 0:
            print("Failed")




        
def run_helium(indir, seldir, outdir):
    """
    indir: prep folder
    seldir: seldir folder
    outdir: gen folder
    """
    if os.path.exists(outdir): shutil.rmtree(outdir)
    os.mkdir(outdir)
    for benchname in os.listdir(indir):
        print ('running helium for ' + os.path.join(indir, benchname) + ' ..')
        bench = os.path.join(indir, benchname)
        # sel = os.path.join(seldir, 'by-bench', item)
        sel = os.path.join(seldir, benchname)
        # includejson = os.path.join(jsondir, benchname, "include.json")
        # snippetjson = os.path.join(jsondir, benchname, "snippets.json")
        includejson = os.path.join(bench, "include.json")
        snippetjson = os.path.join(bench, "snippets.json")
        if not os.path.exists(sel):
            print (sel + ' not exists, skipped')
            continue
        cmd = 'helium --run ' + bench + ' --selection ' + sel +\
              ' --snippet ' + snippetjson +\
              ' --include-dep ' + includejson +\
              ' -o ' + os.path.join(outdir, benchname)
        print("\t==>", cmd)
        complete = subprocess.run(cmd, shell=True)
        if (complete.returncode != 0):
            print("\tFailed")
        
def analyze_buildrate(indir, outdir):
    """
    analyze buildrate and output sorted
    """
    storage = []
    for bench in os.listdir(indir):
        # print ('benchmark: ' + bench)
        benchdir = os.path.join(indir, bench)
        sels = os.listdir(benchdir)
        suc = []
        for sel in sels:
            if os.path.exists(os.path.join(benchdir, sel, 'a.out')):
                suc.append(sel)
        s = 'build rate: {suc_ct}/{total_ct}={br}%'.format(suc_ct=len(suc), total_ct=len(sels), br=len(suc)/len(sels)*100)
        storage.append((bench, len(suc)/len(sels)*100))
    storage = sorted(storage, key=lambda x: x[1], reverse=True)
    with open(outdir, 'w') as f:
        pprint.pprint(storage, stream=f)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='pyhelium -- Helium Python Scripting System')

    parser.add_argument('--unzip', action='store_true')
    parser.add_argument('--create-selection', action='store_true')
    parser.add_argument('--create-iclones-selection', action='store_true')
    parser.add_argument('--preprocess', action='store_true')

    parser.add_argument('--run-helium', action='store_true',
                        help='give as input the preprocessed folder')
    parser.add_argument('-s', '--selection', help='selection files')

    parser.add_argument('--analyze-buildrate', action='store_true')

    # general arguments
    parser.add_argument('input', help='positional /path/to/benchmark')
    parser.add_argument('-o', '--output', help='/path/to/output', required=True)
    
    parser.add_argument('--consume-iclones-result', action='store_true')
    # helium produce: folder
    # ID is the name of the folder
    # helium_output.txt file: {#InputVar, #OutputVar, #data}
    # pairs.json:
    # [{"type": 3, "IDs": [1,2,3]}]
    parser.add_argument('--pairs-json', help='/path/to/iclones/pairs.json')
    args = parser.parse_args()

    if args.unzip:
        unzip(args.input, args.output)
    elif args.preprocess:
        preprocess(args.input, args.output)
    elif args.create_selection:
        create_selection(args.input, args.output)
    elif args.create_iclones_selection:
        create_iclones_selection(args.input, args.output)
    elif args.run_helium:
        if not args.selection:
            print('need to provide selection file or folder')
            exit(1)
        run_helium(args.input, args.selection, args.output)
        # collect build rate information for all of the benchmarks
    elif args.analyze_buildrate:
        analyze_buildrate(args.input, args.output)
