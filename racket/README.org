#+TITLE: Document

Now I'd better use Clang instead of a racket parser because
- c-utils does not do error recovery
- I don't want to use a parser generator

* Stack 1
** Use c-utils
*** TODO treat all errors as typedef and recover
*** TODO macros?? preprocessing??
*** TODO multiple function bug (use single function only)

#+BEGIN_SRC C
void foo(void *x, void *y) { int i = foo(x, y); }
void bar(void *x, void *y) { int i = bar(x, y); }
#+END_SRC

* TODOs
** DONE snippet manager
   CLOSED: [2017-10-19 Thu 14:06]
** CANCELED library manager
   CLOSED: [2017-10-19 Thu 10:37]
** CANCELED include manager
   CLOSED: [2017-10-19 Thu 10:45]

** DONE create AST from file
   CLOSED: [2017-10-20 Fri 15:56]
** DONE load selection
   CLOSED: [2017-10-20 Fri 15:56]

** DONE source manager
   CLOSED: [2017-10-20 Fri 15:56]
- manage multiple files (i.e. multiple ASTs)
** DONE code generation
   CLOSED: [2017-10-20 Fri 19:18]
** STARTED grammar patch
** TODO test case generation
- Type
** TODO test running
** TODO symbol table
- defuse analysis
- from clang: for each AST ndoe
  - definedvar
  - usedvar
** TODO CFG building
** TODO transfer function analyzing

* Not Emergent TODOs
** TODO FIXME switch inverse order


* Format of AST dump

#+BEGIN_SRC racket
  '(TranslationUnitDecl
    (loc (1 0))
    (decls ((DeclStmt (content "int a;"))
            (FunctionDecl (loc (1 . 3))
                          (return "int")
                          (name "foo")
                          (params "int a, int b")
                          (body (compound)))
            (FucntionDecl))))
#+END_SRC

Now for all the subtypes (omitting location for now)

#+BEGIN_SRC racket
  (expr (loc x y) (str "content"))
  (token (str "for"))
  (decl:trans-unit  (decls (decl ...)))
  (decl:function (ret "int")
                 (name "foo")
                 (params "int a,int b")
                 (body stmt))

  (stmt:decl (str "content"))
  (stmt:expr (str "content"))
  (stmt:compound (stmts stmt ...))
  (stmt:for (init expr) (test expr) (incr expr) (body stmt))
  (stmt:while (test expr) (body stmt))
  (stmt:do (test expr) (body stmt))
  (stmt:break)
  (stmt:continue)
  (stmt:return [(value expr)])
  (stmt:if (test expr) (cons stmt) (alt stmt))
  (stmt:switch (test expr) (cases case ...))
  (stmt:case (test expr) (body stmt))
  (stmt:default (body stmt))
#+END_SRC


** Using structure print format
this is not good because when using substructure, the print format is
pretty complicate

#+BEGIN_SRC C
int foo() {
  int a=1;
  return a+1;
}
void bar() {
  return;
}
#+END_SRC


