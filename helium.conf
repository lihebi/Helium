# Helium config file
#
# These options are not enabled to set in commmand line by default.
# To add command line support for any of these, manually do it in arg_parser.cc

helium-home = ~/github/helium
# poi-file = ~/github/helium/data/poi/poi.csv
poi-file = ~/github/helium/data/poi/poi-new.org

# header-config-json = /home/hebi/github/benchmark/package/database/core.new.json
# header-config-json = /home/hebi/github/benchmark/package/database/extra.new.json
# header-config-json = /home/hebi/github/benchmark/package/database/community.new.json
# header-config-json = /home/hebi/github/benchmark/package/database/multilib.new.json

header-config-json = /home/hebi/github/helium/etc/manual-gcc.json
header-config-json = /home/hebi/github/helium/etc/manual-glibc.json
header-config-json = /home/hebi/github/helium/etc/manual-linux.json
header-config-json = /home/hebi/github/helium/etc/manual-other.json

# header-disabled-packages = dietlibc
# header-disabled-packages = aarch64-linux-gnu-gcc
# header-disabled-packages = libbsd
# header-disabled-packages = aarch64-linux-gnu-linux-api-headers
# header-disabled-packages = aarch64-linux-gnu-glibc
# header-disabled-packages = aarch64-linux-gnu-gcc
# header-disabled-packages = apm
# header-disabled-packages = arm-none-eabi-gcc
# header-disabled-packages = arm-none-eabi-newlib
# header-disabled-packages = avr-binutils
# header-disabled-packages = avrdude:6.3
# header-disabled-packages = avr-gcc
# header-disabled-packages = avr-libc
# header-disabled-packages = mingw-w64-gcc
# header-disabled-packages = mingw-w64-headers


# header-disabled-include-paths = /usr/include/bits
# header-disabled-include-paths = /usr/include/sys

header-valid-include-paths = /usr/include
header-valid-include-paths = /usr/lib/gcc/x86_64-pc-linux-gnu/6.3.1/include
header-valid-include-paths = /usr/include/libnl3
header-valid-include-paths = /usr/include/pango-1.0
header-valid-include-paths = /usr/lib/jvm/java-8-openjdk/include
header-valid-include-paths = /usr/include/glib-2.0/
header-valid-include-paths = /usr/lib/glib-2.0/include
header-valid-include-paths = /usr/include/cairo

##############################
## general
##############################

# clang or gcc
# this should be the executable name on the machine
# by default, Helium use "cc"
# this will influence how helium build code segent
# this does NOT influence the preprocessing
cc=gcc

##############################
## Context
##############################

procedure-limit = 4

# Whether to use these tools to build code
address-sanitizer = true
gnulib = false

aggressive-remove = false

# first test aggressive-merge, then random-merge, finally test transfer function
# TODO refactoring
# aggressive-merge = false
# random-merge = false

# method for merging query
# choices from "transfer", "no", "random", "aggressive", "transfer-all"
# default to "transfer"
# transfer-all is used with Resolver2
merge-method = transfer


# debugging statement removing algorithm
debug-remove-alg = false
                
##############################
## test
##############################
test-global-variable = false

# run test or not
instrument-io = true
run-test = true
# random, pairwise
test-generation-method = random

random-test-number = 100
# random select up to 100 cases from 100 suite
pairwise-test-number = 1000
pairwise-corner-number = 10
pairwise-random-number = 10

test-timeout = 100 # mili-seconds
use-struct-type = true # experimental structure type


## input specification
test-input-max-strlen = 10000
# should be larger than 1, always! otherwise will assert failure
test-input-max-argv0-strlen = 10000
test-input-min-int = -100
test-input-max-int = 100
test-input-max-array-size = 5
test-input-max-pointer-size = 1
test-null-pointer-percent = 50


remove-branch-if-not-covered = false
gcov-handle-sigsegv = false

# what data to use for analyze
# choices from "all", "success", "fail"
analyze-data-option = all

##############################
## scalability limit
##############################
# segment-per-poi-limit=100
# valid-poi-limit=100
compile-error-limit-per-poi=20




# max-snippet-number = 100
# max-snippet-size = 2000
# segment-timeout = 2000 # mili seconds
# max-segment-size = 5000
# max-context-size = 1000 # measured by loc


##############################
## Experiment related
##############################

# will use resolver2, used for assertion experiment
use-query-resolver-2 = false
# negate failure condition.
# This is used in assertion experiment, because the fc is generated from the assertion,
# which is negative to fc
negate-fc = false


##############################
## print options
##############################

print-code-output-location = true
print-input-variables = true

print-compile-info = true
print-benchmark-name = true
print-segment-meta = true
print-test-meta = true

print-analyze-result-transfer = true
print-analyze-result-meta = true

print-sat-stmt = false
print-sat-output = false


# print-code-output-location = true
# print-input-variables = false

# print-compile-info = false
# print-benchmark-name = false
# print-segment-meta = false
# print-test-meta = false



print-segment-peek = false # print the peek of the segment. Print from the beginning of the code
segment-peek-loc = 2 # how many lines to peek



print-trace = false
print-compile-error = false
print-warning = false
# print-compile-info-dot = false
print-build-rate = false
print-test-info = false
# print-test-info-dot = false

pause-compile-error = false
pause-ast-unkonwn-tag = false
pause-no-testcase = false




dump-compile-error = false
