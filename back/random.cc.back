
/**
 * Helium is instructed with one or a bunch of slice result.
 * The slice(s) will be the criteria to select segment to run.
 * @param [in] benchmark_folder is the prefix to find the actual file for each slice.
 * slice only contains relative path to the file, and the base is "benchmark_folder"
 * In this function, the validaty of the combo is checked.
 * If the benchmark_folder does not contain the file in the slice, assertion failure will be thrown
 */
void Reader::slice(std::string file, std::string benchmark_folder) {
  assert(false);
  std::vector<SliceFile> slices;
  // 
  if (fs::is_directory(file)) {
    // a directory of slice
    for (fs::directory_entry &x : fs::directory_iterator(file)) {
      std::string item = x.path().string();
      if (fs::is_regular_file(item)) {
        SliceFile sf(item);
        slices.push_back(sf);
      }
    }
  } else if (fs::is_regular_file(file)) {
    // only one file, i.e. only one slice
    SliceFile sf(file);
    slices.push_back(sf);
  }
  // now slices are populated with the specified slice files.
  // it is time to do the experiment.
  for (SliceFile slice : slices) {
    std::cerr << "." << std::flush;
    std::string filename = benchmark_folder + "/" + slice.GetCriteriaFile();
    // std::cout << filename  << "\n";
    // FIXME assert failure
    // assert(fs::exists(filename));
    if (!fs::exists(filename)) continue;
    pugi::xml_document *doc = file2xml(filename);
    XMLNode func = find_node_enclosing_line(doc->document_element(), NK_Function, slice.GetCriteriaLinum());
    // FIXME assert failure
    // assert(func);
    if (!func) continue;
    int func_begin_linum = get_node_line(func);
    int func_end_linum = get_node_last_line(func);
    std::map<std::string, int> slices = slice.GetSlices();
    AST ast(func);
    Individual *ind = new Individual(&ast);
    // std::cout << "func range:" << func_begin_linum << " - " <<func_end_linum  << "\n";
    for (auto s : slices) {
      if (s.first == slice.GetCriteriaFile()) {
        //same file
        if (s.second >= func_begin_linum && s.second <= func_end_linum) {
          // in the same function
          // std::cout << "in range: " << s.second  << "\n";
          ind->SelectNodeByLinum(s.second);
        }
      }
    }
    // build individual
    ind->Solve();
    std::string main_code = ind->GetMain();
    std::string support = ind->GetSupport();
    std::string makefile = ind->GetMakefile();
    Builder builder;
    builder.SetMain(main_code);
    builder.SetSupport(support);
    builder.SetMakefile(makefile);
    builder.Write();
    if (PrintOption::Instance()->Has(POK_CodeOutputLocation)) {
      std::cout << "Code output to "  << builder.GetDir() << "\n";
    }
    builder.Compile();
    int leaf_size = ind->GetGene()->leaf_size(); // the leaf statements selected for this individual
    int node_size = ind->GetGene()->node_size();
    if (builder.Success()) {
      BuildRatePlotDump::Instance()->Push(leaf_size, node_size, -1, ind->GetAllSnippetIds().size(), -1, true);
      // std::cerr << "Compile Success\n";
    } else {
      BuildRatePlotDump::Instance()->Push(leaf_size, node_size, -1, ind->GetAllSnippetIds().size(), -1, false);
      // std::cerr << "Compile Error\n";
    }
  }
  std::cerr << "\n";
}
