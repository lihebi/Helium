#+TITLE: Helium Framework

* Install
** Prerequisite

Note: package libpugixml-dev 1.6 and above is required. If the system
package is 1.4, you might want to update the system to "testing"
version.
For Debian, this is done by
1. change the /etc/apt/source.list file to use "testing" repo
2. sudo apt-get update
3. sudo apt-get upgrade
4. sudo apt-get dist-upgrade


GCC 6 is strongly recommended because I rely on a lot staff on
compiler end. Also 64 bit system is currently recommended because I
use it, and I might hard code some path in x86-64 instead of i386.

*** Packages
    On Debian based system, the following packages should be installed:

    #+BEGIN_EXAMPLE
exuberant-ctags libsqlite3-dev autoconf graphviz
gnulib libboost-all-dev libgtest-dev libpugixml-dev
llvm clang
feh cmake autoconf automake
z3 libz3-dev
r-base
    #+END_EXAMPLE

    =gtest= needs to be built manually:
    #+BEGIN_EXAMPLE
cd /tmp
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=RELEASE /usr/src/gtest
make
sudo mv libg* /usr/lib/
    #+END_EXAMPLE

*** compile ctags library manually
    #+begin_src shell
cd lib/ctags
cp Makefile.linux Makefile
make
make install
    #+end_src

*** Download SrcML
    http://www.srcml.org/

** compile and setup

   You might want to run =ldconfig= to update the library database on
   your system before compile Helium.  In Helium root folder, run =make=
   will compile the project. If your cpu has multiple cores, you can
   use =make -j4= to speed up the compilation.  If no error happens, you
   should get the binary executable as =bin/helium=.  You might want to
   add helium folder to your =PATH= environment variable so that you can
   access it without typing the full path.  To do that, add the
   following lines into your =~/.bashrc= file:

   #+BEGIN_EXAMPLE
export HELIUM_HOME=/path/to/helium/folder
export PATH=$HELIUM_HOME/bin:$HELIUM_HOME/scripts:$PATH
export PATH=$HELIUM_HOME/scripts/analyze:$HELIUM_HOME/scripts/hexp:$PATH
   #+END_EXAMPLE

   Note that the =HELIUM_HOME= variable is /only/ used to save some typing,
   it has nothing to do with the =helium-home= configuration option.
   In other word, Helium does not depends on any environment variables.

   Helium uses [[https://github.com/google/sanitizers/wiki/AddressSanitizer][AddressSanitizer]] to detect memory problems, add the following option for it, also in =~/.bashrc= file:
   #+BEGIN_EXAMPLE
export ASAN_OPTIONS=detect_leaks=0:detect_stack_use_after_scope=0
   #+END_EXAMPLE

   Helium configuration file is =/path/to/helium/helium.conf=, and you need to make a symbolic link to =~/.heliumrc=.
   To do that, run the command in shell:
   #+BEGIN_EXAMPLE
ln -sf /path/to/helium/helium.conf $HOME/.heliumrc
   #+END_EXAMPLE

   Create system type tag-file:
   #+BEGIN_EXAMPLE
make systype.tags
   #+END_EXAMPLE

   Create local =config.h=:
   #+BEGIN_EXAMPLE
   cd lib/config
   aclocal
   autoconf
   autoheader
   ./configure
   #+END_EXAMPLE


** Compile on Mac
Use Homebrew to install LLVM. This will not be sym-linked to
=/usr/local= because Apple has its own llvm, that will cause
trouble. So when using cmake, specify which cmake to use:

#+BEGIN_EXAMPLE
CMAKE_PREFIX_PATH=/usr/local/Cellar/llvm/4.0.0_1/ cmake ..
#+END_EXAMPLE

I'd rather build llvm myself to improve the portability. On mac, build
LLVM with install prefix set to ~/usr/local, and compile Helium like
this:

#+BEGIN_EXAMPLE
LLVM_DIR=~/usr/local/lib/cmake/llvm/ Clang_DIR=~/usr/local/lib/cmake/clang/ cmake ..
#+END_EXAMPLE

UPDATE: I still cannot compile on Mac because the link problem of
clang libraries. It simply cannot find the symbols clang::ASTConsumer,
clang::ASTFrontendAction, etc. Give up, use only linux.

* Run

  Now the ==helium== command should be available. Run it without arguments will show the help information.

** Pre-processing
   To run Helium against a benchmark, you need to first pre-process it.
   There is a script =helium-preprocess.sh= which does this for you.
   It is used against a single benchmark, or a bunch of benchmarks.
   The benchmark can be a folder, or a compressed archive.
   The following examples illustrate the typical usage of it:

   #+BEGIN_EXAMPLE
     helium-preprocess.sh /path/to/benchmark/folder
     helium-preprocess.sh /path/to/benchmark.tar.gz
     helium-preprocess.sh /path/to/benchmark.zip
     helium-preprocess.sh /path/to/b1 /path/to/b2 /path/to/b3
   #+END_EXAMPLE

   This will produce a folder in current directory called =helium-output=,
   and the processed benchmarks will be put into that folder.
   For example, when running =helium-preprocess.sh gzip-1.2.4.tar.gz=, it will produce =./helium-output/gzip-1.2.4/=.
   Run helium against the folder by =helium ./helium-output/gzip-1.2.4=.

** Configuration
   Before running Helium, you should make sure the configuration is what you want.
   All the options can be modified both in the configuration file, and supplied as command line option when you invoke Helium.
   If both present, the command line option takes the priority.
   For example, =run-test= option can be set as command line option by:
   #+BEGIN_EXAMPLE
helium --run-test=false /path/to/benchmark
   #+END_EXAMPLE

   The first two options, namely =helium-home= and =poi-file=, are system dependent,
   you need to set to your own path according to where your Helium folder locates.

** Run helium
   Helium accepts one propositional argument, which is the benchmark folder.
   Other command line options must be prefixed with single or double dash.

   The folder name is used as the benchmark name, which, in turn, is used for locating the start point of Helium.
   The start point, a.k.a. /point of interest(POI)/, is specified in the =poi-file= config option.
   It can be a =csv= file or a =org= table file.
   The file has the columns
   - benchmark :: the name of the benchmark. Helium compares it with the actual folder it runs against.
   - file :: the file name, without path
   - linum :: the line number in above file
   - type :: type of this POI, can be =stmt= or =loop=
   - bug-type :: reserved
   - failure-condition :: reserved

   Running helium is as simple as running against the pre-processed benchmark:
   #+BEGIN_EXAMPLE
helium /path/to/preprocessed/benchmark
   #+END_EXAMPLE


** Testing on known working benchmarks
   Go to the folder $HELIUM_HOME/test/simple, and run

   #+BEGIN_EXAMPLE
helium-preprocess simplebench
helium helium-output/simplebench --poi-file poi.org
   #+END_EXAMPLE

   The result should be "query resolved!".


   Clone this benchmark repo:

   #+BEGIN_EXAMPLE
git clone https://github.com/lihebi/benchmark
cd benchmark
cd buffer-overflow
helium-preprocess gzip-1.2.4.tar.gz
helium helium-output/gzip-1.2.4
   #+END_EXAMPLE

   The result should also write "query resolved!".
