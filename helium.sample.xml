<!-- Default Config -->
<helium>
  <output_folder>helium_result</output_folder>
  <!-- This is the tmp folder where log file and condcomp will be put in -->
  <tmp_folder>/tmp/helium</tmp_folder>
  <segment>
    <code_selection>loop</code_selection>
    <!-- <code_selection>annotation</code_selection> -->
    <!-- <code_selection>assert</code_selection> -->
    <max_segment_size>50</max_segment_size>
    <!-- timeout for a segment(include context search) -->
    <timeout>2000</timeout>
  </segment>
  <context>
    <context_search>linear</context_search>
    <max_linear_search_value>0</max_linear_search_value>
    <max_context_size>1000</max_context_size>
    <simplify_branch>true</simplify_branch>
  </context>
  <build>
    <instrument_position>loop</instrument_position>
    <instrument_type>variable</instrument_type>
    <max_snippet_size>3000</max_snippet_size>
    <max_snippet_number>100</max_snippet_number>
    <simplify_output_var>false</simplify_output_var>
    <!-- <max_function_level></max_function_level> -->
    <!--
    To save generated code, set the following to true.
    The file will be saved to
    <tmp_folder>/generated_code/(in)compilable/<filename>-<line_number>-<date>-<time> folder
    -->
    <save_compilable>false</save_compilable>
    <save_incompilable>false</save_incompilable>
  </build>
  <test>
    <run_test>false</run_test>
    <test_generation>random</test_generation>
    <test_number>10</test_number>
    <timeout>100</timeout>
  </test>
  <analyze>
    <run_analyze>false</run_analyze>
    <analyzer>invariant</analyzer>
    <timeout>100</timeout>
  </analyze>
  <debug>
    <show_compile_error>true</show_compile_error>
    <skip_segment>0</skip_segment>
  </debug>
  <interact>
    <read_segment>false</read_segment>
    <compile>false</compile>
    <compile_error>false</compile_error>
  </interact>
  <cmd>
    <cond_comp_macros>predefined_macros.h</cond_comp_macros>
  </cmd>
  <!-- output control -->
  <output>
    <!-- If no <file>, it will supress the log -->
    <!-- If no <mode>, use as 'a'. can also be 'w' -->
    <!-- If <file> is stdout or stderr, the mode is discarded. -->
    <debug>
      <file>debug.txt</file>
      <!-- <file>stdout</file> -->
    </debug>
    <default>
      <file>default.txt</file>
    </default>
    <trace>
      <file>trace.txt</file>
      <!-- <file>stdout</file> -->
    </trace>
    <compile>
      <file>compile.txt</file>
    </compile>
    <!-- Test input, output, invariant -->
    <data>
      <file>data.txt</file>
    </data>
    <!-- compile/run success/error -->
    <rate>
      <file>rate.txt</file>
      <mode>w</mode>
    </rate>
    <tmp>
      <file>tmp.txt</file>
    </tmp>
    <warning>
      <file>warning.txt</file>
    </warning>
  </output>
</helium>
