#include "ast.h"
#include "individual.h"
#include "utils.h"
#include <iostream>

#include <gtest/gtest.h>

using namespace ast;
/*******************************
 ** Population
 *******************************/
NodeList node_get_children(Node node) {
  NodeList ret;
  switch (kind(node)) {
  case NK_Function: {
    Node block = function_get_block(node);
    ret = block_get_nodes(block);
    break;
  }
  case NK_Block: {
    ret = block_get_nodes(node);
    break;
  }
  case NK_If: {
    ret.push_back(if_get_then(node));
    NodeList elseifs = if_get_elseifs(node);
    ret.insert(ret.end(), elseifs.begin(), elseifs.end());
    ret.push_back(if_get_else(node));
    break;
  }
  case NK_Then: {
    Node block = then_get_block(node);
    ret = block_get_nodes(block);
  }
  case NK_Else: {
    Node block = else_get_block(node);
    ret = block_get_nodes(block);
    break;
  }
  case NK_ElseIf: {
    Node block = elseif_get_block(node);
    ret = block_get_nodes(block);
    break;
  }
  case NK_Switch: {
    ret = switch_get_blocks(node);
    break;
  }
  case NK_While: {
    Node block = while_get_block(node);
    ret.push_back(block);
    break;
  }
  case NK_Do: {
    Node block = do_get_block(node);
    ret.push_back(block);
    break;
  }
  case NK_For: {
    Node block = for_get_block(node);
    ret.push_back(block);
    break;
  }
  default: {}
  }
  return ret;
}
AST::AST(ast::Node root) {
  if (ast::kind(root) != ast::NK_Function) return;
  // clear and substitute everything
  ASTNode *astroot = new ASTNode(); // (ASTNode*)malloc(sizeof(ASTNode));
  // push root into storage
  m_nodes.push_back(root);
  m_local_nodes.push_back(astroot);
  astroot->parent = NULL;
  astroot->index = 0;
  astroot->value = root;
  // construct m_sig
  load(root, astroot);
  // for (ASTNode* n : m_local_nodes) {
  //   // to init: first_child
  //   // to init: next_sibling
    
  // }
}

bool pred(ast::Node node) {
  if (kind(node) == NK_Position) return true;
  return false;
}

void AST::load(ast::Node node, ASTNode *astnode) {
  NodeList nodes = node_get_children(node);
  // remove <pos:position> nodes
  nodes.erase(std::remove_if(nodes.begin(), nodes.end(), pred), nodes.end());
  // create nodes
  // int size = nodes.size();
  // for (int i=0;i<size;i++) {
  //   ASTNode *newnode = (ASTNode*)malloc(sizeof(ASTNode));
  //   astnode->children.push_back(newnode);
  // }
  // if (size>0) astnode->first_child = astnode->children[0];
  // for (int i=0;i<size-1;i++) {
  //   astnode->children[i]->next_sibling = astnode->children[i+1];
  // }
  // astnode->children[size-1]->next_sibling = 0;
  for (Node n : nodes) {
    if (kind(n) == NK_Position) continue;
    // when first time entering a node, push 0
    m_sig.push_back(0);
    ASTNode* newnode = new ASTNode(); // (ASTNode*)malloc(sizeof(ASTNode));
    newnode->parent = astnode;
    newnode->value = n;
    astnode->children.push_back(newnode);
    // also, pre order traversal to store nodes
    newnode->index = m_nodes.size();
    m_nodes.push_back(n);
    m_local_nodes.push_back(newnode);
    // recursive, DFS
    load(n, newnode);
    // come back to a visited node, push 1
    m_sig.push_back(1);
  }
}
void AST::Dump() {
}
std::string AST::GetSigStr() {
  std::string ret;
  for (int a : m_sig) {
    ret += std::to_string(a);
  }
  return ret;
}
std::vector<int> AST::GetSig() {
  return m_sig;
}


/**
 * Least Common Ancestor(LCA)
 */
int AST::ComputeCommonParent(std::vector<int> indices) {
  std::vector<int> tmp = indices;
  std::set<int> all(tmp.begin(), tmp.end());
  std::set<int> convergences;
  int count = 0;
  while (tmp.size() > 1) {
    count++;
    for (auto it=tmp.begin();it!=tmp.end();) {
      // this is root
      if (*it==0) {
        it++;
        continue;
      } else {
        *it = m_local_nodes[*it]->parent->index;
      }
      if (all.count(*it) > 0) {
        // two roots means the common parent is the root
        if (*it == 0) return 0;
        convergences.insert(*it);
        it = tmp.erase(it);
      } else {
        all.insert(*it);
        it++;
      }
    }
  }
  assert(tmp.size() == 1);
  int best_dist = count+1;
  int ret = -1;
  for (auto it=convergences.begin();it!=convergences.end();it++) {
    int dist = ComputeDist(*it, tmp[0]);
    if (dist < best_dist) {
      best_dist = dist;
      ret = *it;
    }
  }
  assert(ret >= 0);
  return ret;
}
std::vector<int> AST::ComputeRetreatingPath(int child, int parent) {
 std::vector<int> ret;
  ret.push_back(child);
  int idx = child;
  while (idx != parent) {
    idx = m_local_nodes[idx]->parent->index;
    ret.push_back(idx);
  }
  return ret;
}
int AST::ComputeDist(int child, int parent) {
  std::vector<int> path = ComputeRetreatingPath(child, parent);
  return path.size()-1;
}

/**
 * TODO
 */
std::string AST::GetCode(std::set<int> indices) {
  if (indices.empty()) return "";
  return "";
}

/**
 * TODO
 */
std::string AST::GetAllCode() {
  return "";
}




/**
 * For simple stmt, use the text. Otherwise use the tag name.
 */
std::string get_label(Node node) {
  switch (kind(node)) {
  case NK_If:
  case NK_Switch:
  case NK_For:
  case NK_Do:
  case NK_While:
    return node.name();
  case NK_DeclStmt:
  case NK_ExprStmt:
  case NK_Decl:
    return get_text(node);
  default:
    return node.name();
  }
}

/**
 * @param color_map the index to color map to color the nodes
 * @param dir "random" to use /tmp/helium.XXXXXX, otherwise use the path
 * @param format png, ps, etc
 * @param display whether to run "display xxx.png" or not
 */
void AST::Visualize(
                    std::map<int, DotColorKind> color_map,
                    std::string dir, bool display) {
  std::string dot;
  dot+= "digraph {\n";
  std::stack<std::string> previous;
  for (size_t i=0;i<m_local_nodes.size();i++) {
    std::string name = std::to_string(i);
    std::string label = get_label(m_nodes[i]);
    std::string attr = "[";
    attr += "label=\"" + name + ":" + label + "\"";
    if (color_map.count(i) == 1) {
      attr += ", style=filled, color=" + DCK_MAP.at(color_map[i]);
    }
    attr += "]";
    dot += name + attr + ";\n";
  }
  // edges
  for (size_t i=0;i<m_local_nodes.size();i++) {
    for (ASTNode *child : m_local_nodes[i]->children) {
      dot += std::to_string(i) + " -> " + std::to_string(child->index) + ";\n";
    }
  }
  dot += "}";
  if (dir == "random") {
    dir = utils::create_tmp_dir("/tmp/helium.XXXXXX");
  } else {
    utils::create_folder(dir);
  }
  utils::write_file(dir+"/out.dot", dot);
  std::string cmd_png = "dot -Tpng "+dir+"/out.dot -o "+dir+"/out.png";
  std::string cmd_ps = "dot -Tps "+dir+"/out.dot -o "+dir+"/out.ps";
  utils::exec(cmd_png.c_str());
  utils::exec(cmd_ps.c_str());
  if (display) {
    #ifdef __MACH__
    std::string display_cmd = "open "+dir+"/out.png";
    #else
    std::string display_cmd = "display "+dir+"/out.png";
    #endif
    utils::exec(display_cmd.c_str());
  }
  // std::cout <<dot  << "\n";
  return;
}


// void AST::Visualize(std::map<int, DotColorKind> color_map) {
//   int count = 0;
//   std::string dot;
//   dot+= "digraph {\n";
//   dot += "root;\n";
//   dot += "root[label=\"" + function_get_name(m_nodes[0]) + "\"];\n";
//   // std::vector<std::string> dot_nodes;
//   // dot_nodes.push_back("root");
//   std::stack<std::string> previous;
//   previous.push("root");
//   for (size_t i=0;i<m_sig.size();i++) {
//     if (m_sig[i] == 0) {
//       count++;
//       m_nodes[count];
//       std::string label = get_label(m_nodes[count]);
//       std::string name = "N" + std::to_string(count);
//       std::string attr = "[";
//       attr += "label=\"" + label + "\"";
//       if (color_map.count(count) == 1) {
//         attr += ", style=filled, color=" + DCK_MAP.at(color_map[count]);
//       }
//       attr += "]";
//       // dot_nodes.push_back(name);
//       // assert(dot_nodes.size() == count + 1);
//       // this node
//       dot += name + attr + ";\n";
//       // edge
//       dot += previous.top() + " -> " + name + ";\n";
//       previous.push(name);
//     } else {
//       previous.pop();
//     }
//   }
//   dot += "}";
  
//   std::string dir = utils::create_tmp_dir("/tmp/helium.XXXXXX");
//   utils::write_file(dir+"/out.dot", dot);
//   std::string cmd1 = "dot -Tpng "+dir+"/out.dot -o "+dir+"/out.png";
//   utils::exec(cmd1.c_str());
//   std::string cmd2 = "display "+dir+"/out.png";
//   utils::exec(cmd2.c_str());
//   // std::cout <<dot  << "\n";
//   return;
// }

std::vector<int> rand_gene(size_t size) {
  std::vector<int> gene;
  for (size_t i=0;i<size;i++) {
    int a = utils::rand_int(0, 2);
    if (a==0) { // 1/3
      gene.push_back(1);
    } else {
      gene.push_back(0);
    }
  }
  return gene;
}

/*******************************
 ** Individual
 *******************************/

void Individual::SetGene(std::vector<int> gene) {
  assert(gene.size() == m_size);
  m_gene = gene;
  m_cgene = ComputeCompleteGene();
}

void Individual::SetGene(std::string gene) {
  assert(gene.length() == m_size);
  m_gene.clear();
  for (char c : gene) {
    if (c == '1') m_gene.push_back(1);
    else if (c == '0') m_gene.push_back(0);
    else {
      assert(false);
    }
  }
  m_cgene = ComputeCompleteGene();
}

/**
 * Gene: 0110110
 * Indices: 1,2,4,5
 */
std::vector<int> gene_to_indices(std::vector<int> gene) {
  std::vector<int> ret;
  for (size_t i=0;i<gene.size();i++) {
    if (gene[i] == 1) {
      ret.push_back(i);
    }
  }
  return ret;
}
std::vector<int> indices_to_gene(std::vector<int> indices, size_t size) {
  std::vector<int> ret;
  std::set<int> indices_set(indices.begin(), indices.end());
  for (size_t i=0;i<size;i++) {
    if (indices_set.count(i) > 0) {
      ret.push_back(1);
    } else {
      ret.push_back(0);
    }
  }
  return ret;
}

std::vector<int> Individual::ComputeCompleteGene() {
  std::set<int> ret_set;
  std::vector<int> indices = gene_to_indices(m_gene);
  int parent_idx = m_ast->ComputeCommonParent(indices);
  std::cout <<"Parent: " << parent_idx  << "\n";
  for (int idx : indices) {
    std::vector<int> path = m_ast->ComputeRetreatingPath(idx, parent_idx);
    ret_set.insert(path.begin(), path.end());
  }
  // std::vector<int> ret(ret_set.size());
  // std::copy(ret_set.begin(), ret_set.end(), std::back_inserter(ret));
  std::vector<int> ret(ret_set.begin(), ret_set.end());
  // std::sort(ret.begin(), ret.end());
  return indices_to_gene(ret, m_gene.size());
}

void Individual::Visualize(std::string dir, bool display) {
  std::cout <<" gene: ";
  for (int g : m_gene) {std::cout <<g;}
  std::cout  << "\n";
  std::cout <<"cgene: ";
  for (int g : m_cgene) {std::cout <<g;}
  std::cout  << "\n";
  
  std::map<int, DotColorKind> color_map;
  // for (size_t i=0;i<m_cgene.size();i++) {
  //   if (m_cgene[i] == 1) {
  //     color_map[i] = DCK_Red;
  //   }
  // }
  // the complete gene
  std::vector<int> indices = gene_to_indices(m_cgene);
  std::cout <<"indices: "  << "\n";
  for (int index : indices) {
    std::cout <<index;
    color_map[index] = DCK_GreenYellow;
  }
  std::cout  << "\n";
  // the original gene
  indices = gene_to_indices(m_gene);
  for (int index : indices) {
    color_map[index] = DCK_Cyan;
  }
  // for (size_t i=0;i<m_gene.size();i++) {
  //   if (m_gene[i] == 1) {
  //     color_map[i] = DCK_Cyan;
  //   }
  // }
  m_ast->Visualize(color_map, dir, display);
}

/**
 * Disabled because the population is for visualization purpose.
 */
TEST(segment_test_case, DISABLED_population) {
  Doc doc;
  const char* raw = R"prefix(

int foo() {
mystruct a;
a = func(b);
a = NULL;
}

int bar(int a, char *b) {
  int x;
  int y;
  int sum;
  int n;
  for (int i=0;i<n;i++) {
    if (i %2 == 0) {
      sum += i;
    } else {
      sum += x * y;
    }
  }
}

void foobar () {
if (x>0) {
  while (x<10) {
    a=b;
    c=d;
    if (a>c) {
      sum+=c;
    } else if (a==c) {
      sum += con1;
    } else {
      sum += a;
    }
  }
} else {
  sum = 0;
  for (int i=0;i<8;i++) {
    sum += i;
  }
}
}


)prefix";
  utils::string2xml(raw, doc);
  NodeList nodes = ast::find_nodes(doc, NK_Function);
  ASSERT_EQ(nodes.size(), 3);
  AST *ast1 = new AST(nodes[0]);
  AST *ast2 = new AST(nodes[1]);
  AST *ast3 = new AST(nodes[2]);
  // ast1.Load(nodes[0]);
  // ast2.Load(nodes[1]);
  // ast3.Load(nodes[2]);
  
  // AST 1
  // std::cout <<ast1.GetSigStr()  << "\n";
  // AST 2
  // std::cout <<ast2.GetSigStr()  << "\n";
  // AST 3
  // std::cout <<ast.GetSigStr()  << "\n";
  Individual ind;
  ind.SetAST(ast3);
  // int size = ind.size();
  std::vector<int> gene;
  utils::seed_rand();

  ast1->Visualize({}, "random", true);
  std::cout <<ast1->GetSigStr()  << "\n";
  ast2->Visualize({}, "random", true);
  std::cout <<ast2->GetSigStr()  << "\n";
  // gene = rand_gene(size);
  // ind.SetGene(gene);
  // ind.Visualize("tmp/1", "ps", false);

  // ind.SetGene(gene);
  // std::cout << "gene: ";
  // for (int g : gene) {
  //   std::cout << g;
  // }
  // std::cout << "\n";

  // for (int i=0;i<8;i++) {
  //   gene = rand_gene(size);
  //   ind.SetGene(gene);
  //   std::string dir = "tmp/"+std::to_string(i);
  //   ind.Visualize(dir, false);
  //   std::string spec = "Gene: "+ind.GetGeneStr() + "\n"
  //     + "Complete Gene: " + ind.GetCGeneStr() + "\n"
  //     + "AST Signature: " + ind.GetASTSigStr();
  //   std::cout <<spec  << "\n";
  //   utils::write_file(dir+"/spec.txt", spec);
  // }

  // gene = rand_gene(size);
  // ind.SetGene(gene);
  // ind.Visualize("tmp/2", "ps", false);
  
  // gene = rand_gene(size);
  // ind.SetGene(gene);
  // ind.Visualize("tmp/3", "ps", false);
  
  // gene = rand_gene(size);
  // ind.SetGene(gene);
  // ind.Visualize("tmp/4", "ps", false);

  delete ast1;
  delete ast2;
  delete ast3;
}

