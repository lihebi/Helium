#+TITLE: Design the Type System


<2016-10-10 Mon>
#+BEGIN_EXAMPLE
HELIUM_INPUT_SPEC
int_iname.strlen = 151
addr_iname = 0x61300000de80
isnull_iname = 0
HELIUM_INPUT_SPEC_END
HELIUM_POI_INSTRUMENT
int_ifname.size = 1024
addr_ifname = 0x6059e0
int_iname.strlen = 151
addr_iname = 0x61300000de80
isnull_iname = 0
HELIUM_POI_INSTRUMENT_END
HELIUM_AFTER_POI
HELIUM_TEST_SUCCESS
#+END_EXAMPLE

I'm going to write a script to parse this output file, and generate a CSV file.
The CSV file will look like:



|       | input  |        |        | output  |         |         | code |
|-------+--------+--------+--------+---------+---------+---------+------|
|       | input1 | input2 | input3 | output1 | output2 | output3 |      |
|-------+--------+--------+--------+---------+---------+---------+------|
| test1 |        |        |        |         |         |         |      |
| test2 |        |        |        |         |         |         |      |
| test3 |        |        |        |         |         |         |      |

status code:
#+BEGIN_EXAMPLE
1 :: fail before input spec
2 :: fail before input spec end
3 :: fail before poi instrument
4 :: fail before poi instrument end
5 :: fail before "after poi"
6 :: fail after poi
7 :: success
#+END_EXAMPLE

After that, I'm ready to write an R script to compute the transfer functions.
I will only use the tests that have a status code of 5, in which the tests failed at exactly POI.
Later I might use
1. the tests that follow the same path, or
2. the tests that didn't follow the exactly same path,
   but have the same transfer function in terms of the variables in the failure condition.

* Input Spec
- Raw Input
- Json specification

** struct
it will be 
#+BEGIN_EXAMPLE
{field1: xxx, field2: yyy}
#+END_EXAMPLE
When passing to the outer level, it becomes:
#+BEGIN_EXAMPLE
{out_field1: {field1: xxx, field2: yyy}, ...}
#+END_EXAMPLE
finally for the outmost type, we have the variable name.

** =int var[8];=
the inner is:
#+BEGIN_EXAMPLE
{int: 0}
#+END_EXAMPLE
The outside is
#+BEGIN_EXAMPLE
[ {int: 0}, {int: 8} ]
#+END_EXAMPLE

** =char *=
the inner is
#+BEGIN_EXAMPLE
{strlen: 12, sizeof: 100}
#+END_EXAMPLE
The outer is
#+BEGIN_EXAMPLE
{HELIUM_POINTER: {strlen:12, sizeof: 100}}
#+END_EXAMPLE

** =int *=
the inner is
#+BEGIN_EXAMPLE
{int: 8}
#+END_EXAMPLE
The outer is
#+BEGIN_EXAMPLE
{HELIUM_POINTER: {int: 8}}
#+END_EXAMPLE

** ArgCV
The identification of ArgCV is in TypeFactory.
There's a class ArgCVType for this variable.

=char *argv[]=, =int argc=

#+BEGIN_EXAMPLE json
{ // 1
  argv_a: true, argv_b: false, // 1
  argv_f: {strlen: 4}, // 2
  argv_1: {strlen: 12}, argv_2: {strlen: 18} // 4
  argc: 1 + 1 + 2 + 4 = 8
}
#+END_EXAMPLE

The raw:
#+BEGIN_EXAMPLE
9
HELIUM_PROG -a -f fdsj 0123456789ab 0123456789abcdefgh
#+END_EXAMPLE

* TODO write down the strategy I use the for the current new type system! It is excellent!

** PointerType

#+BEGIN_SRC c
void *helium_heap_addr[BUFSIZ];
int helium_heap_size[BUFSIZ];
int helium_heap_top = 0;

MyStruct **pointer = (MyStruct**)malloc(helium_size);

helium_heap_addr[helium_heap_top]=pointer;
helium_heap_size[helium_heap_top]=helium_size;
helium_heap_top++;


// output code for a variable var
// previous:
// -- char*
  // isnull
  // strlen
  // addr

// now
// -- char*
  // isnull
  // strlen
  // addr
  // ** size
// -- other*
  // isnull
  // size
  // addr
  // for each: use contained type's output

helium_heap_target_size=-1;
for (int i=0;i<helium_heap_top;i++) {
  if (var == helium_heap_addr[i]) {
    helium_heap_target_size = helium_heap_addr[i];
    break;
  }
}
if (helium_heap_index != -1) {
  printf("size = %d\n", helium_heap_target_size);
  for (int i=0;i<helium_heap_target_size;i++) {
    contained_type->GetInput(var + "[" + i + "]");
  }
}


#+END_SRC

* About argc and argv

I will not create a new Type class for it anymore.
That is hard because:
- they are essentially int and char**
- I need to judge based on the name, but the input generation code does not need to know the name of the variable, not to say the name itself is not precise.

Instead, the new strategy is that, when generating the code for an input /variable/, we know the name and type at that time.
If the variable is =argv= (with some checking for the environment besides the name), we call the same function to generate /decl/ and /input/ code, but use another function to output the metrics for it.
- this function will not only report the size of the heap and each individual component;
- instead, it examines the components, and output the specific:
  - argv_a?
  - argv_f : strlen
  - argv_1: strlen
  - argc: 6

Also, when generating the input test suite, we know the name and the type.
So, it is easy: check if it is argv, if yes, /generate special input/ instead of standard.

What about the generating of output instrumentation? At that time, we also know the name and type! So no problem.

One last thing: how to relate argc and argv? Or do we need to relate them?
We can easily check whether they are both there. It should be rare if not. So, let's assume they are and deal with it if later we found this is not true.
So, just generate them together? how about the order of the input? It seems that no need to worry the order.

HaHa, good right?
