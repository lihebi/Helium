#+TITLE: Snippet Registry Design Document

* SQLite Table Design
Snippet
The file name is by default to =./code/<Snippet-ID>.txt
| ID | filename        | linum |
|----+-----------------+-------|
|  0 | /Users/hebi/b.c |   100 |
|  1 | /Users/hebi/a.c |    10 |

Dependence
| ID | from_snippet_id | to_snippet_id |
|----+-----------------+---------------|
|  0 |               1 |             2 |
|  1 |               1 |             3 |
|  2 |               2 |             3 |

Signature

| ID | keyword | kind | snippet_id |
|----+---------+------+------------|
|  0 | AAA     | s    |          2 |
|  1 | ABCKind | g    |          3 |
|  2 | AK_Mem1 | e    |          3 |
|    |         |      |            |

# header
# | ID | full name    | simple name |
# |----+--------------+-------------|
# |  0 | /path/to/a.h | a.h         |
# |  1 | /path/to/b.c | b.h         |

# header_dependence
# | ID | from_header_id | to_header_id |
# |----+----------------+--------------|
# |  0 |              0 |            1 |
# |  1 |              3 |            1 |
# ** Notes about header dependence
# If it is in a =.c= file, than it will be in the of the priority.
# The header dependence is designed to load only the simple name
# (the filename without path information).
# We also need to sort the snippets based on their type,
# because
# 1. the forward declaration may not be captured
# 2. function declaration is not captured

# Also, the header dependence may have loop, because there's header guard.
# But it is a bad design.

# Another imprecision is we only use the simple header name,
# it will be wrong if two files have the same name.

* Command Line Usage
The command takes the benchmark folder and output the index database file and all the code snippets, one in a file.

#+BEGIN_SRC shell
helium --create-tagfile [-o output.tag] <src-file-or-dir> # default output to "tags"
# default output to "snippets/(index.db|code)"
# default create tags file on the fly
helium --create-snippet-db [-o output] [--tagfile sample.tags] <src-file-or-dir>
#+END_SRC

* Ctags
The following is a full list of kinds supported by ctags.
The executed command is =ctags --list-kinds=

#+headers: :results raw
#+BEGIN_SRC shell
ctags --list-kinds=c
#+END_SRC

#+RESULTS:
c  classes
d  macro definitions
e  enumerators (values inside an enumeration)
f  function definitions
g  enumeration names
l  local variables [off]
m  class, struct, and union members
n  namespaces
p  function prototypes [off]
s  structure names
t  typedefs
u  union names
v  variable definitions
x  external and forward variable declarations [off]


#+BEGIN_EXAMPLE
C
    c  classes
    d  macro definitions
    e  enumerators (values inside an enumeration)
    f  function definitions
    g  enumeration names
    l  local variables [off]
    m  class, struct, and union members
    n  namespaces
    p  function prototypes [off]
    s  structure names
    t  typedefs
    u  union names
    v  variable definitions
    x  external and forward variable declarations [off]
C++
    c  classes
    d  macro definitions
    e  enumerators (values inside an enumeration)
    f  function definitions
    g  enumeration names
    l  local variables [off]
    m  class, struct, and union members
    n  namespaces
    p  function prototypes [off]
    s  structure names
    t  typedefs
    u  union names
    v  variable definitions
    x  external and forward variable declarations [off]
#+END_EXAMPLE

* SQL directives

#+header: :results silent
#+header: :dir /Users/hebi/github/Helium/benchmark/real-programs/bugbench/gzip-1.2.4/snippets
#+header: :db index.db
#+BEGIN_SRC sqlite
  drop table snippet;
  drop table signature;
  drop table dependence;
  create table snippet (
    ID INT, filename VARCHAR(500), linum INT,
    PRIMARY KEY (ID)
  );
  create table signature (
    ID INT, keyword VARCHAR(100), kind VARCHAR(1), snippet_id int,
    PRIMARY KEY (ID),
    FOREIGN KEY (snippet_id) REFERENCES snippet(ID)
  );
  create table dependence (
    ID int, from_snippet_id int, to_snippet_id int,
    primary key (ID),
    foreign key (from_snippet_id) references snippet(ID),
    foreign key (to_snippet_id) references snippet(ID)
  );
  -- create table header (
  --   ID int, full_name VARCHAR(500), simple_name VARCHAR(100),
  --   primary key (ID)
  --   );
  -- create table header_dependence (
  --   ID int, from_header_id int, to_header_id int,
  --   primary key (ID),
  --   foreign key (from_header_id) references header(ID),
  --   foreign key (to_header_id) references header(ID),
  --   );
#+END_SRC

#+header: :dir /Users/hebi/github/Helium/benchmark/real-programs/bugbench/man-1.5h1/snippets
#+header: :colnames yes
#+header: :db index.db
#+BEGIN_SRC sqlite
-- delete from snippet;
-- select * from snippet limit 50;
-- insert into snippet values (0, "/Users/hebi/github/Helium/benchmark/real-programs/bugbench/gzip-1.2.4/src/gzip.h", 103);
select keyword,kind from signature where snippet_id=257;
#+END_SRC

#+RESULTS:
| keyword | kind |
|---------+------|
| version | v    |

** Creating table

#+name: sqlite-populate-test
#+header: :results silent
#+header: :dir ~/tmp/
#+header: :db test-sqlite.db
#+BEGIN_SRC sqlite
  create table snippet (
    ID INT, filename VARCHAR(200), linum INT,
    PRIMARY KEY (ID)
    );
  create table signature (
    ID INT, keyword VARCHAR(30), kind VARCHAR(30), snippet_id int,
    PRIMARY KEY (ID),
    FOREIGN KEY (snippet_id) REFERENCES snippet(ID)
    );
  create table dependence (
    ID int, from_snippet_id int, to_snippet_id int,
    primary key (ID),
    foreign key (from_snippet_id) references snippet(ID),
    foreign key (to_snippet_id) references snippet(ID)
    );
  -- insert into snippet values (3, "hello", 4, "world");
#+END_SRC
** Drop them

#+header: :dir ~/tmp/
#+header: :db test-sqlite.db
#+header: :results silent
#+BEGIN_SRC sqlite
drop table snippet;
drop table signature;
drop table dependence;
#+END_SRC

#+header: :dir ~/tmp/
#+header: :db test-sqlite.db
#+header: :results silent
#+BEGIN_SRC sqlite
delete from snippet;
delete from signature;
delete from dependence;
#+END_SRC


** Tests
#+header: :dir ~/tmp/
#+header: :db test-sqlite.db
#+BEGIN_SRC sqlite
-- insert into snippet values (2, "/Users/hebi/github/Helium/benchmark/real-programs/bugbench/gzip-1.2.4/src/gzip.h", 103);
insert into snippet values (0, "/Users/hebi/github/Helium/benchmark/real-programs/bugbench/gzip-1.2.4/src/gzip.h", 103);
#+END_SRC

#+RESULTS:


** Examining the tables
#+header: :colnames yes
#+header: :results raw
#+header: :dir ~/tmp/
#+header: :db test-sqlite.db
#+BEGIN_SRC sqlite
.schema
#+END_SRC

#+name: sqlite-populate-test
#+header: :colnames yes
#+header: :dir ~/tmp/
#+header: :db test-sqlite.db
#+BEGIN_SRC sqlite
select * from snippet;
#+END_SRC

#+RESULTS: sqlite-populate-test

* Test Code from Babel SQLite
#+name: sqlite-populate-test
#+header: :results silent
#+header: :dir ~/tmp/
#+header: :db test2-sqlite.db
#+begin_src sqlite
create table greeting(one varchar(10), two varchar(10));
insert into greeting values('Hello', 'world!');
#+end_src


#+name: sqlite-hello
#+header: :colnames yes
#+header: :dir ~/tmp/
#+header: :db test2-sqlite.db
#+begin_src sqlite
select * from greeting;
#+end_src

#+RESULTS: sqlite-hello
| one   | two    |
|-------+--------|
| Hello | world! |
