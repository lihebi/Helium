#+TITLE: TODO List for Helium Implementation

- some syntac adjustment
 - switch last stmt break;
 - else if {}


For gzip, We should not stop when we have optind, we need to have the getopt or getopt_long included so that we can make it.
The multiple callsite should be implemented, and it cause a funny inconsistance: in the "bugsig" version, I removed the getopt.c file because it has a main function.
However, there's a optind=0 in that file, which is there in cpped version.
The bugsig version always has optind=1!
And what's still funny to get this is I have a bug that set argv[0] always to helium_program!

Also, wait, I didn't recognize optind as an input variable. How was that decision made?


* Write up for Friday meeting 2016-05-27 Fri 09:44:03 PM

Today's idea focuses on how to use invariants, preconditions, and transfer functions.
The problem is, sometimes we cannot get the data at POI when the buffer overflow bugs are triggered.
The reason is, when we want to print out the string length, we need to access that memory, which will cause a crash.
What we can get is the safe condition, instead of crash condition.
And we want to decide the stop point.

One previous solution is to use the transfer function generated from safe runs, and map back to the precondition.
If the precondition is mapped to, i.e. the precondition can tell the bug condition, we can stop.

However, there's a problem.
The transfer function is for the safe condition.
If the correct run and failure run follow the same pass, the transfer function is the same.
In this case, we can negate the safe condition, into the error condition, and use the transfer function to map back to the failure precondition.
We can further validate it by generating input that satisfies the failure precondition, and observe crash.

On the other hand, in the case the correct run and failure runs follow different pathes,
we can not use the safe transfer function to represent the failure one.

The solution:
1. Research dynamic instrumentation and debugging technique, like valgrind and gdb, to see if they can record the data.
2. When generating code, output two versions: one original, and one with replacement of all buffers to a large fixed length buffer.
   Whenever the input crashes at POI, and not able to get the data, use the same input to test the modified version, and hopefully get the data.
   The downside of this approach: constant overhead, the modified version may change the semantic of the code, e.g. the path.
   To validate if it will change the pass, instrument the branches of the two version and compare the trace.

* Some Future questions
- What about the output statement output many times? Do we only record the last one? or do we record everyone?

* code example

gzip.c:523, the return statement. It will cause compile error if put in main function.
#+BEGIN_SRC C
local void treat_file(iname)
    char *iname;
{
    /* Accept "-" as synonym for stdin */
    if (strequ(iname, "-")) {
	int cflag = to_stdout;
	treat_stdin();
	to_stdout = cflag;
	return;
    }

#+END_SRC

* Report
** Done
- [X] collect address information and its variants, infer the invariants and transfer functions
- [X] Implement the buffer size increasing approach
- [X] use address to record heap buffer
- [X] automate the selecting of changed properties
- [X] debug and make the whole framework running
  - I have made the whole framework working fully automatic on =ncompress= and =polymorphy= benchmark.
    Both the safe condition and error condition is working, and it can stop properly.
- [X] see if the input generation is good enough to trigger the important paths. If not, need to handle the =argc,argv,getopt=
  - for =polymorphy=, it has =getopt( argc, argv, "achtvf:" )=, and random generation cannot trigger the =f= branch.
    I implemented the code to generate such inputs, by extract the string specification from the code and generate accordingly.

** A problem about the stop point
as we discussed before, the stop point is
1) when the precondition and transfer function can imply invariants, in safe condition or error condition.
2) the precondition variables are entry points.
This works most of the time, but
#+BEGIN_SRC C
int main(int argc, char *argv[]) {
  if (strlen(argv[1]) > 1024) exit 1;
  foo(argv[1]);
}
void foo(char *src) {
  char buf[1024];
  strcpy(buf, src);
}
#+END_SRC

In this example, =argv[1]= is checked before entering the =foo= function. But at the call site, we have:
- precondition: =argv[1] > 1024=
- transfer function: =strlen(argv[1]) = strlen(src)=
- invariants: =strlen(src) > 1024=
Which indicates successfully find the stop point.

** TODOs
Direction 1: write up
- [ ] Write down the design decision made along the framework
- [ ] Write down analysis of the results
- [ ] Study comprehensively about the new related work and write the related work section.
Direction 2: slice
- [ ] Try srcml slicer, run the same algorithm on slice to see the result
Direction 3: remove statements
- [ ] think about search algorithms to remove irrelevant statements
Direction 4: more benchmarks
- =gzip=: compile error, as I mentioned before, caused by SrcML bug. I need to debug into this and report to SrcML team or fix myself.
  Or I can adjust the benchmark.
- =man=: most complicated one, not tried yet. This is different from the other three bugs:
  - This is a different buffer overflow bug type (pointer address out of buffer)
  - The point of interest will executed many times due to two loops.

* Another thing: the gzip benchmark snippet too long
TODO: should output warning when this happens!
Should be able to do it by srcml warning.
Does srcml output unmatched braces warning?
Currently Just list the errors here, and modify manually.

gzip.c:707:
#+BEGIN_SRC C
#ifdef NO_FSTAT
	if (stat(ofname, &ostat) != 0) {
#else
	if (fstat(ofd, &ostat) != 0) {
#endif
	    fprintf(stderr, "%s: ", progname);
	    perror(ofname);
	    close(ifd); close(ofd);
	    unlink(ofname);
	    exit_code = ERROR;
	    return ERROR;
	}
#+END_SRC

the above code is not passing correctly.
The conditional compilation will cause the code to have unmatched braces.

Similar ones:
gzip/src/tree.c:896

These are the only two files that has the issue. After manual remove the conditional compilation, it should works.

* Another compile error
gzip/deflate.c:220
#+BEGIN_SRC C
#ifdef  FULL_SEARCH
# define nice_match MAX_MATCH
#else
  int near nice_match; /* Stop searching when current match exceeds this */
#endif
#+END_SRC

gzip.c:174
#+BEGIN_SRC C
#ifdef NO_OFF_T
  typedef long off_t;
  off_t lseek OF((int fd, off_t offset, int whence));
#endif
#+END_SRC

The problem is, off_t is defined, and if no this conditional compilation, the compiler will complain for redefine the type.

* another VERY VERY strange code
unlzh.c:82-106

#+BEGIN_SRC C
/* local ush c_table[4096]; */
#define c_table d_buf
#if (DIST_BUFSIZE-1) < 4095
    error cannot overlay c_table and d_buf
#endif

local ush       bitbuf;
#+END_SRC

You see that "error cannot overlay c_table and d_buf"?
This must be a macro, for error.
But, it will influence the later =bitbuf= variable declaration!
SrcML doesn't know this,
so the type of =bitbuf= becomes "error cannot ... local ush", including whatever in between, even the comments!

* Maybe the last issue for gzip!
The =gzip/src/getopt.c= file is actually not needed!
And it has a main function, which will cause me trouble when I get the callsite, main function.
If I select the wrong main function, it will of course not contain the callsite and the context I want.
