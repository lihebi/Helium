#+TITLE: Backup Document

** implicity header dependence
Since we gather all code snippets, e.g. structure definition, function definition, into a single file,
it is important to know the order they should appar, otherwise it is very likely to cause compile error.
The approach we take is to retain the order of the original program.

It is easy to know the order if two snippets are in the same header file.
However, if they appear in different file, it is non-trival to know the order.
Current approach is to take the header file dependencies, i.e. if =a.h= includes =b.h=,
then all snippets in =a.h= should appear later than those in =b.h=.
We call this /hard dependence/, i.e. dependence which should always be satisfied.

However, it is discovered that some header files does not explictly contain this information.
E.g. TODO matz-stream?

One idea is to also use the sequence they appear in the source files.
E.g. if we found that both =a.c= and =b.c= includes =a.h= and =b.h=, and both of them put =a.h= before =b.h=,
we know we may need to put the snippets in =a.h= ahead of those in =b.h=.
We call this /soft dependence/.

Another potential issue is the hard dependence may not always be true, due to the use of /header guard/.
E.g. =a.h= includes =b.h=, and =b.h= can also includes =a.h=.
If =a.h= and =b.h= both have /header guard/, it will not be a problem to compile.
The order which is determined by which one comes first to the compiler.
This is considered a bad practice in program,
so it is not known such cases often exist in the benchmarks.
