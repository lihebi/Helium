#+TITLE: AST

* AST Visitors
*** DONE Generator
    CLOSED: [2017-03-25 Sat 00:29]
Another visitor, the Generator, visit each node and output program. This is also very tricky:
- If I use SrcML's XML structure to generate, it is hard to "remove" something
- If I create string, many things are not modeled such as parenthesis.

I'll go with /hybrid/ method: use srcml for most of the part, and fine
tune to create string for the part that is omitted, e.g. the Inc expr
of forstmt.

*** DONE ParenNode
    CLOSED: [2017-03-28 Tue 14:44]
*** TODO lazy evaluation
*** TODO variable resolving and including declaration
*** TODO Semantic checking such as break continue, for init decl


* Token Selection
*** DONE TokenNode
    CLOSED: [2017-03-24 Fri 03:20]
I'll have a special kind of AST Node called =TokenNode= inherit from
=ASTNodeBase=.  Each type of node will be able to get the token
node. For example, =IfStmt= will have a method called
- getIfTokenNode()
- getElseTokenNode()
- getParenTokenNode()


*** DONE TokenVisitor
    CLOSED: [2017-03-24 Fri 04:00]
I'll also implement a visitor called =TokenVisitor= that visitor all
the tokens of AST, and assign the IDs for each of them.


*** DONE SourceRange
    CLOSED: [2017-03-24 Fri 12:40]
To get the location, I'll add =SourceRange= class and add instances to
each of the AST Nodes (including the =TokenNode=).

The process is as follows:
- TokenVisitor is called, and assign IDs for all tokens
- Build a map for ID <-> SourceRange


*** DONE Test Selection Process
    CLOSED: [2017-03-24 Fri 14:29]
The line and column number is based on the pre-processed file.

# The token should be represented as range of source code.  For each
# cache, there should be one token file. Every token should have a
# unique ID.

# | id | kind | file | line | col | end_line | end_col |
# |----+------+------+------+-----+----------+---------|
# |  0 | ID   | a.c  |    3 |   8 |        3 |      10 |
# |  1 | Expr | b.c  |      |     |          |         |
# |  2 | Decl | b.c  |      |     |          |         |

# Distribution file

# | id | kind      | Name | file | line | col | end_line | end_col |
# |----+-----------+------+------+------+-----+----------+---------|
# |  0 | procedure | foo  | a.c  |    3 |   1 |        8 |       2 |
# |  1 | if        | NA   | a.c  |    5 |   2 |        7 |       0 |
# |  2 | switch    |      | b.c  |      |     |          |         |
# |  3 | loop      |      |      |      |     |          |         |

# The selection file should be a list of IDs.
# We need  to control
# 1. number of tokens
# 2. distribution of tokens: this using the token ID and the distribution file

The selection process:
- for test, I list a list of source location
- helium read the location and map to the IDs. Using the IDs, it then map to the AST nodes

Selection.txt format:
- if filename start from a _, assume it is a folder
- The source file name in SourceManager will be:
  - target cache dir / "cpp"
  - relative path, e.g. src_a.c
  - will match the file name by a suffix
    - if src/a.c and a.c dep/src/a.c all exists, and provide name:
    - a.c :: will match a.c
    - src_a.c :: will match src/a.c
    - dep_src_a.c :: will match dep/src/a.c
#+BEGIN_EXAMPLE
# src/a.c
line column
line column
# dep/libc/b.c
line column
# x.c
#+END_EXAMPLE
*** DONE random selection of distribution
    CLOSED: [2017-03-24 Fri 21:12]
- for random generate of selection with consideration of distribution

tokens
| token ID | file | token Loc | scopes |
|----------+------+-----------+--------|
|        3 | a.c  | (3,8)     |        |

relation
| token ID | scope ID |
|----------+----------|
|        3 |        1 |
|        3 |        2 |

scopes

| scope ID | scope name | file | loc               |
|----------+------------+------+-------------------|
|        1 | if         | a.c  | if.beginLoc       |
|        2 | while      | a.c  | while.beginLoc    |
|        3 | function   | a.c  | function.beginLoc |

Given these three tables as "distribution table", given a selection of
#+BEGIN_EXAMPLE
# file
line column
line column
line column
line column
#+END_EXAMPLE

- First convert it to token IDs.
- Then find scope IDss
- Input distribution requirement:
  - # of tokens
  - # in if
  - # in while
  - # in function
  - in same function
  - in same if
  - in same while
  - in same file
  - in different file
- Generate approach
  - Interactive
    - random select token IDs
    - see if it satisfy the requirement, if not, remove /extra/, and generate more to feed
  - another approach (prefered): generate many, simply check requirement, select good ones

The report:

| # tokens | # function | # if | # while | # |
|----------+------------+------+---------+---|
|        2 |            |      |         |   |
|        3 |            |      |         |   |
|        4 |            |      |         |   |
|        5 |            |      |         |   |

raw data format:

| #tok | #patch | #file | #per(file) | #proc | #per(proc) | #if | #per(if) | #loop | #per(loop) | # switch | #per(switch) | result |
|------+--------+-------+------------+-------+------------+-----+----------+-------+------------+----------+--------------+--------|
|      |        |       |            |       |            |     |          |       |            |          |              |        |

- metrics
  - while
  - for
  - do
  - if
  - switch
  - proc
  - file


# ** A simple approach
# Generate ID for leaf nodes of AST. 
# Print the AST, and ask for the selection.

# In this case, the table is different: there'll be no line number staffs. So the table is not necessary.
# The token database will contains the following:

# | id | kind | file |
# |----+------+------|
# |  1 | ID   |      |
# |  2 | ID   |      |
# |  3 | Expr |      |

# | distID | kind     | name | file |
# |--------+----------+------+------|
# |      1 | function |      |      |
# |      2 | if       |      |      |

# | distID | id |
# |--------+----|
# |      1 |  1 |
# |        |  2 |
# |        |  3 |
# |        |  4 |
# |      2 |  1 |
# |        |  5 |

