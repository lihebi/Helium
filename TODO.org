#+TITLE: Helium Project TODO


* New Stage

  - Syntax patching algorithm rethink and test for examples of
    different scenarios.
    - Implement syntax patching and integrate with Helium, test build
      rate
  - Removing of code algorithm rethink
    - “real time removing” (remove if transfer function does not
      change) has any problems? Search for examples?
    - Test in real benchmarks
  - Continue assertion experiment, get good results or identify
    difficulties and solve them
  - Model more inputs for bug signatures. E.g. network input for CVE
    benchmarks. Come up with Systematic way or Heuristic for
    identifying program entry point.

** Remove of code
current strategy
- remove if transfer function does not change

Task done:
- Implement
- Test in real benchmarks
- Hand write examples
- Run Helium and gather the changed examples
  - randomly choose a location
  - use the variables as variable of interest
  - run context search, if not changed, record and go to a pair, with
    and without the new statement
    - one continue to do context search for both of them
    - if at some point, one changed and one does not, report it out


Implement a tester:
- for each of the segment, record a list of marked statements
- marked statements are those that do not alter the transfer functions
- for each new statement(s) n added, test
  - seg + n (1)
  - seg - mark + n (2)
  and compare to
  - seg (3)
  - seg - mark
  The result will be of the following kinds
  - seg + n == seg
  - seg - mark + n == seg - mark
  - seg + n == seg - mark + n
  Using the numbers
  - 1,2,3 :: n changes the property, to different directions.
    - REPORT
  - 123 :: n does not change property.
    - Continue, add to mark
  - 12,3 :: n change property, and mark has no difference.
    - Continue. Do not add to mark
  - 13,2 :: n change property of full, but does not change property of
       removing mark
    - Report
  - 23,1 :: n change property of remove mark, but does not change that
       of full
    - Report


Some results

| code  | count |
|-------+-------|
| 12,3  |    70 |
| 123   |    89 |
|-------+-------|
| 1,2,3 |     0 |
| 13,2  |     7 |
| 23,1  |     0 |


#+BEGIN_SRC C
int main() {
  int a=0;
  int b=1;
  int c=b-20;
  while (c<b) {
    a=c;
    c++;
  }
  a++;
  assert(a<b);
}
#+END_SRC

- most of the time, transfer function is not inferred.
- Different path have different transfer functions. Although we search
  context along path, When including the while node, we automatically
  include the paths.
- Using both success and failure runs, will also execute the different
  path
- we indeed need to model path by path if want to be precise
- piece-wise linear might be helpful





** Add merge-everything option, for debugging ...
** gnu parallel
** String content input model





* TODO [#A] For PLDI
** TODO more buffer-overflow
** TODO grammar patching implementation and evaluation
** TODO input code into function

* CANCELED add option to control helium_dump_compile_error
  CLOSED: [2016-12-08 Thu 09:48]

* TODO The heap size recorder
  can only work for the variables that I generate input code for.
  - it does not take into account other variables, which might be used
    as output variable
  - It does not count for the advancing of pointers. For example, the
    pointer might be advanced one, then the new pointer address is no
    longer been recorded in the heap recorder. Maybe we should try to
    keep a status variable for each variable, and update it through
    the generated code, just like what Daikon did.
* TODO confidence of inferred information
  in terms of the paper writing, we might use a confidence for the
  inference (transfer function), to remove those that have few test
  values, or those always with the same value (few distinct
  values). Daikon used a probabilistic theory to reject NULL hypothesis.
* TODO compare static
  In paper writing, don't forget to conduct a detailed comparison to
  static inferencing.
* TODO transfer function with successfully runs
* TODO failure condition generation
* TODO Helium use fs::path instead of string for all
  SCHEDULED: <2016-10-20 Thu>
* TODO Helium utils thread exec refactoring
