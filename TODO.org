#+TITLE: Helium Project TODO

* Helium
- input variables for new frontend
- generate and compile code for new CFG frontend
- hook backend and testing

** Urgent
- Pairwise corner testing
- z3 symbolic exe

** Nice to have
- refactor test case generation
- refactor backend analysis



** enhancement
- output warning instead of assertion
- if callsite cannot compile, no need to continue
- log trace verbose

* Context search
I already have a CFG. I need to implement the context search algorithm.


- [x] Basically each time get the predecessor on CFG, and construct.
- Based on return test profile, decide whether to remove the new one.
- [x] If is branch, wait there and insert an entry at that branch.
  [x] If previously some path comes, merge into them.

The delivery:
- [x] construct various of situations of code.
- [x] Start at various of POI. (need a POI setting scheme).

- Print out every step nodes.
- Print out the CFG itself.
- Print out every step as CFG.

current stack
- [x] CFG keep a back edge
- [x] CFG get cfg node from AST node, get predecessor function!










- Construct bug signature myself
- figure out the different backend oracle for different type of bugs (like instrument-xxx=true)
- make it stable for examples

Enhancement:
- Add default action for different bug type


* Backend Type Design

** instrument type

Buffer overflow:
- strlen

2-f, u-a-f:
- NULL
- address
- free-list

Null-deref:
- NULL

Infinite-loop:
- loop jump out condition
- function parameter

** Analyze type
Buffer overflow:
- strlen v.s. buffer size

2-f:
- pointer address in free-d list

Null-deref:
- Pointer is NULL, use correct runs to identify the pointer

Infinite-loop:
- pre-condition only
- invariant not satisfy jumpout condition

Let's check pre-condition along:
- Have a reasonable invariant
- pre-condition relate to only input variables
- TODO ensure the pre-condition is not satisfied by invalid tests. I.e. the pre-condition is sure to trigger!
